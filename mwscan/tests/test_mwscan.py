import os
import time
from unittest import TestCase
from mwscan import scan, settings
from mwscan.ruleset import Files
from collections import namedtuple

try:
    from unittest import mock
except ImportError:
    import mock


class TestWebMalwareScanner(TestCase):

    def _load_file_rules(self, path):
        args = namedtuple('Args', 'rules')(rules=path)
        return Files(args=args).get()

    def setUp(self):

        settings.CACHEDIR = '/tmp'
        settings.LAST_RUN_FILE = '/tmp/last_run'

        self.fixture_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'fixtures')
        self.rules_path = os.path.join(self.fixture_path, 'rules.yar')
        self.target_path = os.path.join(self.fixture_path, 'files')
        self.state_file = scan.scanpath_to_runfile(self.target_path)
        self.new_file = os.path.join(self.target_path, 'newer_malware')

        assert self.state_file.startswith('/tmp')

        # might still exist from cancelled earlier test
        for i in self.new_file, self.state_file:
            try:
                os.unlink(i)
            except OSError:
                pass

        self.rules, self.whitelist = self._load_file_rules(self.rules_path)

    def test_normal_scan(self):
        files = scan.find_targets(self.target_path)
        malware, whitelisted = scan.scan_files(files, self.rules, self.whitelist)

        self.assertEqual(len(malware), 2)
        self.assertEqual(len(whitelisted), 1)

    def test_scan_callback(self):

        targets = scan.find_targets(self.target_path)
        testcb = mock.MagicMock()
        scan.scan_files(targets, self.rules, self.whitelist, testcb)
        self.assertEqual(testcb.call_count, 2)

    def test_filter_extensions(self):

        ext = ['php']

        files = scan.find_targets(self.target_path, required_extensions=ext)
        malware, whitelisted = scan.scan_files(files, self.rules, self.whitelist)

        self.assertEqual(len(malware), 1)
        self.assertEqual(len(whitelisted), 0)

    def test_external_rule_file(self):
        files = scan.find_targets(self.target_path)

        rules_path = os.path.join(self.fixture_path, 'rules-vanilla.yar')
        self.rules, self.whitelist = self._load_file_rules(rules_path)

        malware, whitelisted = scan.scan_files(files, self.rules, self.whitelist)

        self.assertEqual(len(malware), 2)
        self.assertEqual(len(whitelisted), 0)

    def test_find_targets_will_exclude_patterns(self):
        p = set([r'no_.+_here'])
        files = list(scan.find_targets(self.target_path, exclude_patterns=p))
        matches = [x for x in files if 'no_malware_here' in x]
        assert matches == [], matches
        assert len(files) > 4, files

        p = set([r'/'])
        files = list(scan.find_targets(self.target_path, exclude_patterns=p))
        assert files == [], files

    def test_that_symlinks_are_followed(self):
        paths = scan.find_targets(self.target_path, follow_symlinks=True)
        files = map(os.path.basename, paths)
        assert 'im_a_symlink' in files, \
            'no symlink found in results'
        assert 'recursive_symlink' not in files, \
            'recursive symlink is included'
        assert 'im_a_broken_symlink' not in files, \
            'broken symlink is included'
