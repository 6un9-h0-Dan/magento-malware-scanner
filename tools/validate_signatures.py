#!/usr/bin/env python3

import os
import re
import sys
from glob import glob
from build_rules import write_all_rules

try:
    from subprocess import check_output
except ImportError:
    print("This validation requires Python 2.7+")
    sys.exit(0)

MALWARE_PATH = 'corpus'
RULES_PATH = 'rules'
RULES_CONFIRMED_PATH = 'build/all-confirmed.yar'
SEGMENTS = ['frontend', 'backend']

"""
Purpose: maintain quality of fingerprint database and malware corpus.

Ensure:

1. Every fingerprint has at least 1 match.
2. Every sample has at least 1 match.
3. Nothing from false-positives has a match
"""


def all_samples():
    return set([fn for s in SEGMENTS for fn in glob(MALWARE_PATH + '/' + s + '/*') ])


def slurp(path):
    with open(path) as fh:
        return fh.read()


def all_rules():
    body = slurp(RULES_CONFIRMED_PATH)
    body = re.sub('^\s*//.+$', '', body, flags=re.MULTILINE)
    rulenames = re.findall('rule\s+(\S+)\s', body)    
    return set(rulenames)


def runtests():
    report = check_output(['yara', '-r', RULES_CONFIRMED_PATH, MALWARE_PATH]).decode()
    
    rules = set([x.strip().partition(' ')[0] for x in report.splitlines()])
    samples = set([x.strip().partition(' ')[2] for x in report.splitlines()])
    
    unmatched_rules = all_rules() - rules
    unmatched_samples = all_samples() - samples
    
    if unmatched_rules:
        print("Found unmatched rules:")
        for x in sorted(unmatched_rules):
            print("\t" + x)
        
    # if unmatched_samples:
    #     print("Found %s unmatched samples:\n" % len(unmatched_samples))
    #     for x in sorted(unmatched_samples):
    #         print("\t" + x)
        
    if unmatched_rules: 
        sys.exit(1)
    
    print("All tests succeeded")
    sys.exit(0)


if __name__ == '__main__':
    write_all_rules()
    runtests()
