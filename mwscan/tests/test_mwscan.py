import os
from unittest import TestCase
from mwscan import mwscan
from mwscan.ruleset import Files
from collections import namedtuple



class TestWebMalwareScanner(TestCase):

    def _load_file_rules(self, path):
        args = namedtuple('Args', 'rules')(rules=path)
        return Files(args=args).get()


    def setUp(self):


        mwscan.CACHEDIR = '/tmp'
        mwscan.LAST_RUN_FILE = '/tmp/last_run'

        self.fixture_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'fixtures')
        self.rules_path = os.path.join(self.fixture_path, 'rules.yar')
        self.target_path = os.path.join(self.fixture_path, 'files')
        self.state_file = mwscan.scanpath_to_runfile(self.target_path)
        self.new_file = os.path.join(self.target_path, 'newer_malware')

        # might still exist from cancelled earlier test
        for i in self.new_file, self.state_file:
            try:
                os.unlink(i)
            except OSError:
                pass

        self.rules, self.whitelist = self._load_file_rules(self.rules_path)


    def test_normal_scan(self):
        files = mwscan.find_targets(self.target_path)
        malware, whitelisted = mwscan.scan_files(files, self.rules, self.whitelist)

        self.assertEqual(len(malware), 2)
        self.assertEqual(len(whitelisted), 1)

    def test_newonly_scan(self):
        infections = { self.new_file }

        mwscan.write_last_run_results(self.target_path, infections)
        infections.add('/newly/infected')

        new = mwscan.filter_new_infections(self.target_path, infections)

        self.assertEqual(len(new), 1)

    def test_filter_extensions(self):

        ext = ['php']

        files = mwscan.find_targets(self.target_path, req_ext=ext)
        malware, whitelisted = mwscan.scan_files(files, self.rules, self.whitelist)

        self.assertEqual(len(malware), 1)
        self.assertEqual(len(whitelisted), 0)

    def test_external_rule_file(self):
        files = mwscan.find_targets(self.target_path)

        rules_path = os.path.join(self.fixture_path, 'rules-vanilla.yar')
        self.rules, self.whitelist = self._load_file_rules(rules_path)

        malware, whitelisted = mwscan.scan_files(files, self.rules, self.whitelist)

        self.assertEqual(len(malware), 2)
        self.assertEqual(len(whitelisted), 0)
